<tal:include metal:use-macro="load: spriteset_templates_purchase.pynml" />

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->

<tal:spritesets repeat="spriteset_data consist.gestalt_graphics.unique_spritesets">
    <!--! spriteset loops got too complex in the templates, with livery, empty state, cargo loading, cargo loaded, and random variants
          so I moved the logic for spritesets into the gestalt, and simply render out all from a list with a trivial loop -->
    spriteset(${vehicle.id}_ss_${spriteset_data[0]}_${spriteset_data[1]}, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.vehicle_length}_8_${spriteset_data[1]}(${spriteset_data[2]})
    }
    <!--! spritegroups aren't used here, direct to spriteset -->
</tal:spritesets>

<!--! I did try consolidating cargo + load + flip into a single switch checking procedures, but it exceeded the 255 limit for varact 2 ranges -->
<tal:load_state repeat="load_state ['loading', 'loaded']">
    <tal:flip_state repeat="flip_state ['unflipped', 'flipped']">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_cargo_${load_state}_${flip_state}, cargo_type_in_veh) {
            <tal:cargos repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
                <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
                    <!--!  uses mapping[1][0] as cargo_row_map has a legacy list format to support random variants
                          fixing cargo_row_map would require refactoring num_cargo_sprite_variants in gestalt graphics -->
                    ${mapping[0]}: return ${vehicle.id}_ss_${load_state}_${mapping[1][0]}_${flip_state};
                </tal:exclude_default_cargo>
            </tal:cargos>
            <!--! generic cargos -->
            return ${vehicle.id}_ss_${load_state}_${consist.gestalt_graphics.generic_rows[0]}_${flip_state};
        }
    </tal:flip_state>
</tal:load_state>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, switch_graphics_visible_cargo_flip_and_load()) {
    0: return ${vehicle.id}_ss_empty_unflipped;
    1: return ${vehicle.id}_switch_cargo_loading_unflipped;
    2: return ${vehicle.id}_switch_cargo_loaded_unflipped;
    3: return ${vehicle.id}_ss_empty_flipped;
    4: return ${vehicle.id}_switch_cargo_loading_flipped;
    5: return ${vehicle.id}_switch_cargo_loaded_flipped;
}


// buy menu graphics chain
spriteset(${vehicle.id}_ss_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10)
}
<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      when there is nothing specific, then this is just a null switch -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
    return ${vehicle.id}_ss_purchase;
}

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<tal:include metal:use-macro="load: capacity_switches.pynml" />

<tal:include metal:use-macro="load: properties.pynml" />
