<!--! Liveries that change depending on one or both of:
      - the 'role' of the engine
      - the major cargo in the consist
      Intended for pax and mail cars, possibly limited other types.
      - liveries are in pairs (livery_1, livery_2)
      - flipping vehicle swaps livery
          - N.B. asymmetric sprites won't reverse when flipped, they maintain same orientation and change livery
          - most sprites are symmetric, except, e.g. brake coaches
      - consist cargos can be checked by label and reference a block of the spritesheet
      - loaded and empty state are same, but loading state is provided (for opening doors at stations)
            - open doors are comped in by the graphics processor
    - see also notes in
 -->

<tal:include metal:use-macro="load: spriteset_templates_purchase.pynml" />

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->
// default graphics chain
<tal:consist_cargo_variants repeat="variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">

    <tal:user_flipped repeat="flipped ['unflipped', 'flipped']">
        spriteset(${vehicle.id}_ss_doors_closed_livery_1_${variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_${'reversed' if flipped == 'flipped' else 'unreversed'}_${vehicle.vehicle_length}_8_${flipped}(10 + ${variant_num * 120})
        }
        spriteset(${vehicle.id}_ss_doors_open_livery_1_${variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_${'reversed' if flipped == 'flipped' else 'unreversed'}_${vehicle.vehicle_length}_8_${flipped}(10 + ${variant_num * 120} + 30)
        }
        spriteset(${vehicle.id}_ss_doors_closed_livery_2_${variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_${'reversed' if flipped == 'flipped' else 'unreversed'}_${vehicle.vehicle_length}_8_${flipped}(10 + ${variant_num * 120} + 60)
        }
        spriteset(${vehicle.id}_ss_doors_open_livery_2_${variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}.png") {
          spriteset_template_${vehicle.symmetry_type}_${'reversed' if flipped == 'flipped' else 'unreversed'}_${vehicle.vehicle_length}_8_${flipped}(10 + ${variant_num * 120} + 90)
        }

        <tal:livery repeat="livery ['livery_1', 'livery_2']">
            <!--! be aware that 'loaded' in nml is really 'moving', i.e. not in a station loading/unloading -->
            spritegroup ${vehicle.id}_sg_part_load_or_empty_${livery}_${variant_num}_${flipped} {
                loaded:  [
                    ${vehicle.id}_ss_doors_closed_${livery}_${variant_num}_${flipped},
                ];
                loading: [
                    ${vehicle.id}_ss_doors_open_${livery}_${variant_num}_${flipped},
                ];
            }
            spritegroup ${vehicle.id}_sg_full_load_${livery}_${variant_num}_${flipped} {
                loaded:  [
                    ${vehicle.id}_ss_doors_closed_${livery}_${variant_num}_${flipped},
                ];
                loading: [
                    ${vehicle.id}_ss_doors_closed_${livery}_${variant_num}_${flipped},
                ];
            }
            <!--! spritegroups aren't needed here, the loading state is calculated explicitly -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_percent_loaded_${livery}_${variant_num}_${flipped}, cargo_count*100/cargo_capacity) {
                    0..99: return ${vehicle.id}_sg_part_load_or_empty_${livery}_${variant_num}_${flipped};
                return ${vehicle.id}_sg_full_load_${livery}_${variant_num}_${flipped};
            }
        </tal:livery>

        <!--! in case there wasn't enough complexity here, let's do pantographs too, in a separate layer -->
        <tal:pantographs condition="consist.pantograph_type is not None">
            <!--! !! the y base offsets here won't work for multi-unit vehicles, they need a different calculation -->
            <tal:pantographs repeat="pantograph_state ['down', 'up']">
                spriteset(${vehicle.id}_ss_pantographs_${pantograph_state}_${variant_num}_${flipped}, "${global_constants.graphics_path}${consist.id}_pantographs_${pantograph_state}.png") {
                  spriteset_template_${vehicle.symmetry_type}_${'reversed' if flipped == 'flipped' else 'unreversed'}_${vehicle.vehicle_length}_8_${flipped}(10 + ${variant_num * 60})
                }
            </tal:pantographs>
            <!--! this is crude and won't work, for e.g. ELNG, or for 3rd-party electrified railtypes which aren't ELRL -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_pantographs_${variant_num}_${flipped}, current_railtype) {
                ELRL: return ${vehicle.id}_ss_pantographs_up_${variant_num}_${flipped};
                return ${vehicle.id}_ss_pantographs_down_${variant_num}_${flipped};
            }
        </tal:pantographs>

    </tal:user_flipped>
    switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_engine_id_${variant_num}, switch_graphics_consist_specific_livery_check_engine_id()) {
        0: return ${vehicle.id}_switch_graphics_percent_loaded_livery_1_${variant_num}_unflipped;
        1: return ${vehicle.id}_switch_graphics_percent_loaded_livery_2_${variant_num}_flipped;
        2: return ${vehicle.id}_switch_graphics_percent_loaded_livery_2_${variant_num}_unflipped;
        3: return ${vehicle.id}_switch_graphics_percent_loaded_livery_1_${variant_num}_flipped;
    }

    <tal:conditional_pantograph condition="consist.pantograph_type is not None">
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_pantographs_${variant_num}, vehicle_is_flipped) {
            1: return ${vehicle.id}_switch_graphics_pantographs_${variant_num}_flipped;
            return ${vehicle.id}_switch_graphics_pantographs_${variant_num}_unflipped;
        }
    </tal:conditional_pantograph>
    switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle_layers_${variant_num}, getbits(extra_callback_info1, 8, 8)) {
        0: return ${vehicle.id}_switch_graphics_engine_id_${variant_num};
        <tal:conditional_pantograph condition="consist.pantograph_type is not None">
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            1: return ${vehicle.id}_switch_graphics_pantographs_${variant_num};
        </tal:conditional_pantograph>
    }

</tal:consist_cargo_variants>

<tal:position_in_consist repeat="cargo_row_map consist.gestalt_graphics.cargo_row_map.items()">
    <tal:vars define="cargo_label cargo_row_map[0];
                      variants consist.gestalt_graphics.get_variants_with_position_keys(cargo_row_map)">
        <!--! rulesets must comply with the position names in gestalt_graphics.consist_positions_ordered
              these could be extended or made arbitrary, but that's unwanted complexity -->
        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'pax_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_default_${cargo_label}, 0) {
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['default']};
            }

            <!--! if special -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_special_check_length_${cargo_label}, num_vehs_in_vehid_chain) {
                <!--! don't show 'special' if same id chain < 4 vehicles -->
                0..3: return ${vehicle.id}_switch_graphics_position_default_${cargo_label};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['special']};
            }
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_check_special_${cargo_label}, position_in_vehid_chain_from_end - position_in_vehid_chain) {
                0..1: return ${vehicle.id}_switch_graphics_position_special_check_length_${cargo_label};
                ${vehicle.id}_switch_graphics_position_default_${cargo_label};
            }

            <!--! if last -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_check_last_${cargo_label}, position_in_vehid_chain_from_end) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
                ${vehicle.id}_switch_graphics_position_check_special_${cargo_label};
            }

            <!--! if first -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_first_check_length_${cargo_label}, num_vehs_in_vehid_chain) {
                <!--! don't show 'first' if same id chain < 5 vehicles -->
                0..4: return ${vehicle.id}_switch_graphics_position_default_${cargo_label};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
            }
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_check_first_${cargo_label}, position_in_vehid_chain) {
                0: return ${vehicle.id}_switch_graphics_position_first_check_length_${cargo_label};
                ${vehicle.id}_switch_graphics_position_check_last_${cargo_label};
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, num_vehs_in_vehid_chain) {
                <!--! always show default if same id chain < 2 vehicles -->
                0..1: return ${vehicle.id}_switch_graphics_position_default_${cargo_label};
                return ${vehicle.id}_switch_graphics_position_check_first_${cargo_label};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'pax_railcars'">
            <!--! if 1 unit in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_1_${cargo_label}, position_in_vehid_chain % 6) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['default']};
            }

            <!--! if 2 units in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_2_${cargo_label}, position_in_vehid_chain % 6) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
            }

            <!--! if 3 units in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_3_${cargo_label}, position_in_vehid_chain % 6) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['special']};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
            }

            <!--! if 4 units in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_4_${cargo_label}, position_in_vehid_chain % 6) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
            }

            <!--! if 5 units in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_5_${cargo_label}, position_in_vehid_chain % 6) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['special']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
            }

            <!--! if 6 units in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_6_${cargo_label}, position_in_vehid_chain % 6) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['special']};
                2: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
                3: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
                4: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['special']};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
            }

            <!--! this is a remainder block, how many units are in it? -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_less_than_6_remaining_${cargo_label}, num_vehs_in_vehid_chain % 6) {
                1: return ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_1_${cargo_label};
                2: return ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_2_${cargo_label};
                3: return ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_3_${cargo_label};
                4: return ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_4_${cargo_label};
                5: return ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_5_${cargo_label};
                return ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_6_${cargo_label};
            }

            <!--! given the consist, how many blocks of 6 units are there?  Is the unit within a block of 6, or a remainder block? -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, position_in_vehid_chain >= (num_vehs_in_vehid_chain - (num_vehs_in_vehid_chain  % 6))) {
                1: return ${vehicle.id}_switch_graphics_less_than_6_remaining_${cargo_label};
                return ${vehicle.id}_switch_graphics_modulo_num_units_in_consist_6_${cargo_label};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'mail_cars'">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_default_${cargo_label}, 0) {
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['default']};
            }

            <!--! if special -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_special_check_length_${cargo_label}, num_vehs_in_vehid_chain) {
                <!--! don't show 'special' if same id chain < 4 vehicles -->
                0..3: return ${vehicle.id}_switch_graphics_position_default_${cargo_label};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['special']};
            }
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_check_special_${cargo_label}, position_in_vehid_chain_from_end - position_in_vehid_chain) {
                0..1: return ${vehicle.id}_switch_graphics_position_special_check_length_${cargo_label};
                ${vehicle.id}_switch_graphics_position_default_${cargo_label};
            }

            <!--! if first -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_first_check_length_${cargo_label}, num_vehs_in_vehid_chain) {
                <!--! don't show 'first' if same id chain < 5 vehicles -->
                0..4: return ${vehicle.id}_switch_graphics_position_default_${cargo_label};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
            }
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_check_first_${cargo_label}, position_in_vehid_chain) {
                0: return ${vehicle.id}_switch_graphics_position_first_check_length_${cargo_label};
                ${vehicle.id}_switch_graphics_position_check_special_${cargo_label};
            }

            <!--! if last -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_check_last_${cargo_label}, position_in_vehid_chain_from_end) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
                ${vehicle.id}_switch_graphics_position_check_first_${cargo_label};
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, 0) {
                return ${vehicle.id}_switch_graphics_position_check_last_${cargo_label};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'mail_railcars'">
            <!--! if 1st unit in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_check_1st_${cargo_label}, position_in_vehid_chain_from_end) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['default']};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
            }

            <!--! if 2nd unit in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_check_2nd_${cargo_label}, 0) {
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, position_in_vehid_chain % 2) {
                0: return ${vehicle.id}_switch_graphics_position_in_consist_check_1st_${cargo_label};
                return ${vehicle.id}_switch_graphics_position_in_consist_check_2nd_${cargo_label};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'driving_cab_cars'">
            <!--! only show 'last' if consist has > 1 vehicle - keeps the cab orientated <- when built in depot, matching buy menu -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_last_check_length_${cargo_label}, num_vehs_in_consist) {
                1: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['default']};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, position_in_consist_from_end) {
                0: ${vehicle.id}_switch_graphics_position_last_check_length_${cargo_label};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['default']};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == 'metro'">
            <!--! if 1st unit in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_check_1st_${cargo_label}, position_in_vehid_chain_from_end) {
                0: return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['default']};
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['first']};
            }

            <!--! if 2nd unit in sequence -->
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_check_2nd_${cargo_label}, 0) {
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['last']};
            }

            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, position_in_vehid_chain % 2) {
                0: return ${vehicle.id}_switch_graphics_position_in_consist_check_1st_${cargo_label};
                return ${vehicle.id}_switch_graphics_position_in_consist_check_2nd_${cargo_label};
            }
        </tal:position_ruleset>

        <tal:position_ruleset condition="consist.gestalt_graphics.consist_ruleset == None">
            switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label}, 0) {
                return ${vehicle.id}_switch_graphics_vehicle_layers_${variants['special']};
            }
        </tal:position_ruleset>
    </tal:vars>
</tal:position_in_consist>

switch (FEAT_TRAINS, PARENT, ${vehicle.id}_switch_graphics_vehicle, most_common_cargo_type) {
    <tal:cargos repeat="cargo_label consist.gestalt_graphics.cargo_row_map.keys()">
    <!--!  assume that we always want first entry from the cargo's list of spritegroup row nums
           this will be the spritegroup row num for the 'default' vehicle graphical variant -->
        <tal:exclude_default_cargo condition="cargo_label != 'DFLT'">
            ${cargo_label}: return ${vehicle.id}_switch_graphics_position_in_consist_entry_point_${cargo_label};
        </tal:exclude_default_cargo>
    </tal:cargos>
    return ${vehicle.id}_switch_graphics_position_in_consist_entry_point_DFLT;
}

// buy menu graphics chain
spriteset(${vehicle.id}_ss_vehicle_purchase, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_purchase_${vehicle.id}(10 + ${vehicle.buy_menu_spriterow_num * 30})
}
<tal:conditional_pantographs switch="consist.pantograph_type is not None">
    <tal:has_pantographs case="True">
        <!--! purchase sprites for case where pantograph layer is needed -->
        spriteset(${vehicle.id}_ss_pantograph_purchase, "${global_constants.graphics_path}${consist.id}_pantographs_down.png") {
          spriteset_template_purchase_${vehicle.id}(10)
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_set_layers_register_more_sprites_purchase, STORE_TEMP(CB_FLAG_MORE_SPRITES | PALETTE_USE_DEFAULT, 0x100)) {
            return ${vehicle.id}_ss_vehicle_purchase;
        }
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, getbits(extra_callback_info1, 8, 8)) {
            <!--! if there are pantographs to draw we will handle that later in the graphics chain,
                  but we need to reserve layer 1 for the pantographs as well as layer 0 for the vehicle  -->
            0: return ${vehicle.id}_switch_set_layers_register_more_sprites_purchase;
            1: return ${vehicle.id}_ss_pantograph_purchase;
        }
    </tal:has_pantographs>
    <tal:no_pantographs case="False">
        <!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
              when there is nothing specific, then this is just a null switch -->
        switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, 0) {
            0: return ${vehicle.id}_ss_vehicle_purchase;
        }
    </tal:no_pantographs>
</tal:conditional_pantographs>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />

