<!--!
    liveries mapped to cargos, but no support here for load states, just one sprite per cargo
    e.g. tank cars with black for oil, cc for chemicals, grey for petrol etc.
-->

<tal:include metal:use-macro="load: spriteset_templates_purchase.pynml" />

<!--! 'random_reverse' property is not supported in this template, vehicles using this template are all symmetrical, reversing would do nothing
      'flipped' is user flipping vehicle in depot and *is* supported here (used for livery selection tricks)
      don't conflate them :) -->
// default graphics chain
spriteset(${vehicle.id}_ss_company_colour, "${global_constants.graphics_path}${consist.id}.png") {
  spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.vehicle_length}_8_flipped(10)
}
<tal:cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">
    spriteset(${vehicle.id}_ss_${cargo_variant_num}_unflipped, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_${vehicle.symmetry_type}_unreversed_${vehicle.vehicle_length}_8_unflipped(40 + ${cargo_variant_num * 30})
    }
</tal:cargo_variants>

switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_cargo_type, cargo_type_in_veh) {
    <tal:cargos repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
        <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
            <!--! cargo_row_map has a legacy list format to support random variants, which isn't used here, just take first item
                  fixing this would require refactoring num_cargo_sprite_variants in gestalt graphics -->
            ${mapping[0]}: return ${vehicle.id}_ss_${mapping[1][0]}_unflipped;
        </tal:exclude_default_cargo>
    </tal:cargos>
    <tal:default_cargo repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
        <tal:block condition="mapping[0] == 'DFLT'">
            return  ${vehicle.id}_ss_${mapping[1][0]}_unflipped;
        </tal:block>
    </tal:default_cargo>
}

// flip state sets cargo-specific livery or CC
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_vehicle, vehicle_is_flipped) {
    1: return ${vehicle.id}_ss_company_colour;
    return ${vehicle.id}_switch_graphics_cargo_type;
}

// buy menu graphics chain
<tal:cargo_variants repeat="cargo_variant_num python:range(consist.gestalt_graphics.num_cargo_sprite_variants)">
    spriteset(${vehicle.id}_ss_purchase_${cargo_variant_num}, "${global_constants.graphics_path}${consist.id}.png") {
      spriteset_template_purchase_${vehicle.id}(40 + ${cargo_variant_num * 30})
    }
</tal:cargo_variants>

<tal:include metal:use-macro="load: graphics_switches.pynml" />

<!--! purchase sprites always go through a switch in case the template does anything specific for purchase graphics
      if there was nothing specific, then this would just be a null switch, but in this case we switch to the livery for (default) cargo -->
switch (FEAT_TRAINS, SELF, ${vehicle.id}_switch_graphics_purchase, cargo_type_in_veh) {
    <tal:cargos repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
        <tal:exclude_default_cargo condition="mapping[0] != 'DFLT'">
            ${mapping[0]}: return ${vehicle.id}_ss_purchase_${mapping[1][0]};
        </tal:exclude_default_cargo>
    </tal:cargos>
    <tal:default_cargo repeat="mapping consist.gestalt_graphics.cargo_row_map.items()">
        <tal:block condition="mapping[0] == 'DFLT'">
            return ${vehicle.id}_ss_purchase_${mapping[1][0]};
        </tal:block>
    </tal:default_cargo>
}
<tal:optional_capacity_switches condition="vehicle.has_cargo_capacity">
    <tal:include metal:use-macro="load: capacity_switches.pynml" />
</tal:optional_capacity_switches>

<tal:include metal:use-macro="load: properties.pynml" />
